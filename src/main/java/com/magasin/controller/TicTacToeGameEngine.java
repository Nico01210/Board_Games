package com.magasin.controller;

import com.magasin.Core.*;
import com.magasin.model.tictactoe.TicTacToe;
import com.magasin.ui.View;

/**
 * Moteur de jeu sp√©cifique au TicTacToe utilisant le pattern Visitor.
 * Ce moteur impl√©mente une logique de traitement sp√©cialis√©e pour chaque √©tat du jeu.
 */
public class TicTacToeGameEngine implements TicTacToeStateVisitor {
    
    private GameController controller;
    private boolean moveProcessed = false;
    private Move lastMove;
    
    public TicTacToeGameEngine(GameController controller) {
        this.controller = controller;
    }
    
    @Override
    public void visitInitializingState(TicTacToe game) {
        System.out.println("üîß Initialisation du moteur TicTacToe...");
        // Logique sp√©cifique √† l'initialisation du TicTacToe
        validateGameSetup(game);
    }
    
    @Override
    public void visitConfiguringState(TicTacToe game) {
        System.out.println("‚öôÔ∏è Configuration du TicTacToe...");
        // Configuration sp√©cifique au TicTacToe
        setupTicTacToeRules(game);
    }
    
    @Override
    public void visitPlayingState(TicTacToe game) {
        System.out.println("üéÆ TicTacToe en cours...");
        // Logique sp√©cifique au jeu TicTacToe
        analyzeGameState(game);
    }
    
    @Override
    public void visitWaitingForMoveState(TicTacToe game) {
        System.out.println("‚è≥ En attente du mouvement du joueur...");
        // Logique d'attente sp√©cifique au TicTacToe
        Player currentPlayer = game.getCurrentPlayer();
        
        if (currentPlayer instanceof ArtificialPlayer) {
            System.out.println("ü§ñ L'IA " + currentPlayer.getName() + " r√©fl√©chit...");
            // Simulation du temps de r√©flexion de l'IA
            try {
                Thread.sleep(1000); // 1 seconde de r√©flexion
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        } else {
            System.out.println("üë§ " + currentPlayer.getName() + ", √† votre tour !");
        }
    }
    
    @Override
    public void visitValidatingMoveState(TicTacToe game) {
        System.out.println("‚úÖ Validation du mouvement TicTacToe...");
        // Validation sp√©cifique aux r√®gles du TicTacToe sera g√©r√©e par la logique du jeu
        moveProcessed = true;
    }
    
    @Override
    public void visitUpdatingGameState(TicTacToe game) {
        System.out.println("üîÑ Mise √† jour du plateau TicTacToe...");
        // La mise √† jour est d√©j√† faite par playOneTurn() dans Game
        moveProcessed = false;
        lastMove = null;
    }
    
    @Override
    public void visitCheckingEndConditionsState(TicTacToe game) {
        System.out.println("üèÅ V√©rification des conditions de fin TicTacToe...");
        // V√©rification sp√©cifique aux r√®gles de victoire du TicTacToe
        checkTicTacToeWinConditions(game);
    }
    
    @Override
    public void visitGameOverState(TicTacToe game) {
        System.out.println("üéØ Fin de partie TicTacToe !");
        // Traitement de fin sp√©cifique au TicTacToe
        displayTicTacToeResults(game);
    }
    
    @Override
    public void visitPausedState(TicTacToe game) {
        System.out.println("‚è∏Ô∏è TicTacToe en pause...");
        // Logique de pause sp√©cifique
    }
    
    @Override
    public void visitErrorState(TicTacToe game) {
        System.out.println("‚ùå Erreur dans le moteur TicTacToe !");
        // Gestion d'erreur sp√©cifique
    }
    
    // === M√©thodes priv√©es sp√©cifiques au TicTacToe ===
    
    private void validateGameSetup(TicTacToe game) {
        Player[] players = game.getPlayers();
        if (players == null || players.length != 2) {
            throw new IllegalStateException("TicTacToe n√©cessite exactement 2 joueurs");
        }
        
        // V√©rifier que les symboles sont diff√©rents
        if (players[0].getSymbol() == players[1].getSymbol()) {
            throw new IllegalStateException("Les joueurs doivent avoir des symboles diff√©rents");
        }
    }
    
    private void setupTicTacToeRules(TicTacToe game) {
        // Configuration des r√®gles sp√©cifiques au TicTacToe
        System.out.println("üìã R√®gles TicTacToe activ√©es : alignement de 3 symboles requis");
    }
    
    private void analyzeGameState(TicTacToe game) {
        // Analyse de l'√©tat actuel du jeu
        int emptyCells = countEmptyCells(game);
        System.out.println("üìä Cases vides restantes : " + emptyCells);
        
        if (emptyCells == 0 && game.getWinner() == null) {
            System.out.println("‚öñÔ∏è Situation de match nul probable");
        }
    }
    
    private int countEmptyCells(TicTacToe game) {
        int count = 0;
        Board board = game.getBoard();
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board.getCell(i, j).isEmpty()) {
                    count++;
                }
            }
        }
        return count;
    }
    
    private void checkTicTacToeWinConditions(TicTacToe game) {
        // V√©rification des 8 lignes de victoire possibles (3 lignes, 3 colonnes, 2 diagonales)
        Player winner = game.getWinner();
        if (winner != null) {
            System.out.println("üèÜ Victoire d√©tect√©e pour " + winner.getName());
        } else if (countEmptyCells(game) == 0) {
            System.out.println("ü§ù Match nul d√©tect√©");
        }
    }
    
    private void displayTicTacToeResults(TicTacToe game) {
        System.out.println("\n" + "=".repeat(30));
        System.out.println("üéÆ R√âSULTATS FINAUX TICTACTOE");
        System.out.println("=".repeat(30));
        
        View.displayBoard(game.getBoard());
        
        Player winner = game.getWinner();
        if (winner != null) {
            System.out.println("üèÜ VAINQUEUR : " + winner.getName() + " (" + winner.getSymbol() + ")");
        } else {
            System.out.println("ü§ù MATCH NUL");
        }
        
        System.out.println("=".repeat(30));
    }
    
    // Getters/Setters pour l'√©tat interne
    public Move getLastMove() {
        return lastMove;
    }
    
    public void setLastMove(Move lastMove) {
        this.lastMove = lastMove;
    }
    
    public boolean isMoveProcessed() {
        return moveProcessed;
    }
}